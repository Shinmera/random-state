(in-package #:org.shirakumo.random-state)

(define-generator hammersley (make-list (length (hammersley-leap generator)) :initial-element 'single-float) (hash-generator)
  ((leap (make-array 3 :element-type '(unsigned-byte 32) :initial-element 1) :type (simple-array (unsigned-byte 32) (*))))
  (:copy
   (make-hammersley :%seed (hammersley-%seed generator)
                    :index (hammersley-index generator)
                    :leap (make-array (length (hammersley-leap generator))
                                      :element-type '(unsigned-byte 32)
                                      :initial-contents (hammersley-leap generator))))
  (:hash
   (declare (optimize speed))
   (flet ((dim (base leap seed)
            (declare (type (unsigned-byte 32) base leap seed))
            (let ((seed2 (fit-bits 32 (+ seed (* index leap))))
                  (base-inv (/ (float base 0f0)))
                  (r 0f0))
              (declare (type single-float r base-inv))
              (loop while (/= 0 seed2)
                    do (incf r (* (mod seed2 base) base-inv))
                       (setf base-inv (/ base-inv base))
                       (setf seed2 (truncate seed2 base))
                    finally (return r)))))
     (let ((result (make-array (length leap) :element-type 'single-float)))
       (declare (type (simple-array (unsigned-byte 32) (*)) leap))
       (dotimes (i (length result) result)
         (setf (aref result i) (dim (prime (1+ i)) (aref leap i) (ldb (byte 8 i) seed))))))))
