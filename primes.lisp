(in-package #:org.shirakumo.random-state)

(let ((pis-1 (make-array 0 :adjustable T :fill-pointer T :element-type '(signed-byte 64)))
      (pis (make-array 0 :adjustable T :fill-pointer T :element-type '(unsigned-byte 64)))
      (primes (make-array 1 :adjustable T :fill-pointer T :element-type '(unsigned-byte 64) :initial-contents '(2))))
  (defun compute-ruiz-pis-part1 (j)
    (if (< j (length pis-1))
        (aref pis-1 j)
        (let* ((s-max (floor (sqrt j)))
               (sigma1 (loop for s from 1 to s-max
                             sum (- (floor (/ (1- j) s)) (floor (/ j s)))))
               (result (floor (* (/ 2 j) (1+ sigma1)))))
          (vector-push-extend result pis-1)
          result)))

  (defun compute-ruiz-pi (k)
    (if (< k (length pis))
        (aref pis k)
        (let ((result (cond
                        ((= k 1) 0)
                        ((= k 2) (1+ (compute-ruiz-pis-part1 2)))
                        (T (+ 1 (compute-ruiz-pis-part1 k) (compute-ruiz-pi (1- k)))))))
          (vector-push-extend result pis)
          result)))

  (defun prime (n)
    (declare (type (unsigned-byte 32) n))
    (if (< n (length primes))
        (aref primes n)
        (let* ((n (1+ n))
               (result (1+ (loop for k from 1 to (* 2 (1+ (floor (* n (log n)))))
                                 summing (- 1 (floor (/ (compute-ruiz-pi k) n)))))))
          (vector-push-extend result primes)
          result))))
