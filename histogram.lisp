(in-package #:org.shirakumo.random-state)

(defun histogram (rng bins &key (samples (floor 1e8)) (width 80) (stream *standard-output*))
  (check-type samples (unsigned-byte 64))
  (let ((histogram (make-array bins))
        (sample-contribution (/ samples))
        (start (get-internal-real-time)))
    (format stream "0% ")
    (flet ((percentage (i)
             (round (* (- width 8) (/ i samples)))))
      (dotimes (i samples)
        (when (/= (percentage i) (percentage (1+ i)))
          (format stream "█"))
        (locally (declare (optimize speed))
          (incf (aref histogram (floor (* (random 1.0 rng) bins)))
                sample-contribution))))
    (format stream " 100%~%")
    (let ((duration (/ (- (get-internal-real-time) start)
                       INTERNAL-TIME-UNITS-PER-SECOND)))
      (format stream "Generation took: ~6,3fs, ~fμs/sample~%"
              duration (* 1000000 (/ duration samples))))
    histogram))

(defun print-histogram (histogram &key (stream *standard-output*) (width 80))
  (assert (< 7 width))
  (let ((half-width (/ (- width 7) 2))
        (total 0.0))
    (loop for bin across histogram
          for deviation = (* 100 (- bin (/ (length histogram))))
          for chars = (max (- half-width) (min (+ half-width) (floor (* 2 half-width deviation))))
          do (format stream "~6,3@f% ~v@{░~}~v@{█~}~v@{░~}~%" deviation
                     (min half-width (+ half-width chars))
                     (abs chars)
                     (min half-width (- half-width chars))
                     NIL)
             (incf total (abs deviation)))
    (format stream "Cumulative deviation: ~6,3f%~%" total)
    histogram))
